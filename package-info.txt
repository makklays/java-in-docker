
Контейнер собираеться командой
# docker build

На данном этапе из этих образов уже можно запустить конйтенер с помощью команды
# docker run

Запустить стек контейнеров можно с помощью команды
# docker-compose up

Для того чтобы оставить все контейнеры используется команда
# docker-compose stop

Для того чтобы остановить и удалить все контейнеры используется команда
# docker-compose down

Для того, чтобы посмотреть список запущенных контейнеров используется команда
# docker ps

Чтобы приатачиться обратно можно использовать команду
# docker attach

Для того чтобы выполнить какую-нибудь команду в контейнер без аттача можно использовать команду
# docker exec

Для просмотра стдаута приложения можно воспользоваться командой
# docker logs
или
# docker-compose logs

После того как сделали какие-то изменения в файлах сервера контейнер нужно пересобрать (с.м выше про сборку образов),
и перезалить в реестр (с.м выше про пуш образов) а дальше перезагрузить на продакшн сервере
Запулить нужный образ заного можно командой
# docker-compose pull
или
# docker-compose -f docker-compose.prod.yml pull authserver

При частой локальной пересборки будеи накапливаться мусор из старых образов. Очистить образы можно командой
# docker image prune

запустить конйтенер с помощью команды
# docker run
# docker run --name mariadbtest -e MYSQL_ROOT_PASSWORD=root -p 3306:3306 -d docker.io/library/mariadb:10.3

Ребилдим образы и пушим их в реестр с помощью команды
# docker push
или
# docker-compose push

Важный момент по поводу имени файла: все команды docker-compose изначально ожидают что файл будет
называться docker-compose.yml, без лишних приставок, но можно дополнительно передать конкретный файл с помощью флага -f
например запуска инсталятора
# docker-compose -f docker-compose.prod.yml --profile db-install up

----------------------------------------------------------------------------------------------------------------------
Для того, чтобы выполнять команды внутри контейнера, надо для начала в него попасть. Для моих нужд достаточно одной
простой команды. Но перед тем как попасть в контейнер, нам необходимо получить ID необходимого контейнера.
Делается это командой:
# docker ps

После получения списка всех запущенных контейнеров, мы выбираем (в первом столбце) ID нужного нам контейнера и
подставляем в следующую команду вместо <container_id>:
# docker exec -it <container_id> bash

Данная команда в контейнере <container_id> запустит bash прямо в вашей консоли. После чего, можно выполнять внутри
контейнера все правки, которые нам необходимы. Главное не забыть сделать коммит контейнера перед тем, как его убить или
остановить, ибо в противном случае все ваши правки не сохранятся.

Проверить кто занял порт:
# docker-compose down  # Stop container on current dir if there is a docker-compose.yml
# docker rm -fv $(docker ps -aq)  # Remove all containers
# sudo lsof -i -P -n | grep <port number>  # List who's using the port

# docker stop <name>

jdbc:mysql://host.docker.internal:3306/aton

----------------------------------------------------------------------------------------------------------------------
Postman
метод POST http://localhost:8080/ws
Postman Вкладка Header -> Content-Type: text/xml
Postman Вкладка raw -> XML
<?xml version="1.0" encoding="UTF-8"?>
<soapenv:Envelope
    xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"
    xmlns:ns="http://your-namespace.com">
  <soapenv:Header/>
  <soapenv:Body>
    <!--ns:addRequest>
        <ns:a>2</ns:a>
        <ns:b>3</ns:b>
    </ns:addRequest-->
    <ns:getContactRequest>
        <ns:name>Alexander2</ns:name>
    </ns:getContactRequest>
  </soapenv:Body>
</soapenv:Envelope>

----------------------------------------------------------------------------------------------------------------------
//

//